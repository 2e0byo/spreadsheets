{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Bob\u2019s Guide to Spreadsheets . Bob is an impecunious client who will appear somewhat later; for now you are left with me. This website is a spreadsheet tutorial with a difference: more specifically, with two differences. Firstly, it is free: it\u2019s just a static website. Secondly, it is not written by an expert in spreadsheets, or even someone who uses them very often. (In fact, having viewed a few other tutorials prior to writing this one, that might not be so unique.) This tutorial exists for two reasons: firstly, my wife asked for something of the kind, and when I couldn\u2019t find one, I decided to write one (and to put it online so everyone can criticise it). Secondly, because although I do not use spreadsheets very often, I encounter the spreadsheets of people who do very frequently, and I think most of them fall into one of two conceptual mistakes: Spreadsheets are not programming environments. Spreadsheets are not large data entry tables where you can write down all the answers once you\u2019ve worked them out. The first error is generally encountered either in corporations where someone (rarely the end user) has written a bunch of \u2018macros\u2019 in something horrible like Visual Basic (the aptly named programming language of the Micro$oft Windoze [Almost]Operating System), which get applied pretty haphazardly to all kinds of scenarios. The problem here is that the end user does not know how that macro works and the programmer has generally not predicted that the end user would format data like that . This stems from the real strength of spreadsheets: they don\u2019t generally enforce a particular data arrangement. In this course we will not cover macros, but we will explore the question of why you might want to avoid them in more detail. The second error is encountered from people who couldn\u2019t work out how to calculate xyz this particular time, got fed up trying, and wrote down the answer. Providing they wrote it down correctly everything is fine. The problem is when somebody else comes along and edits the sheet. Likely they will expect a \u2018total\u2019 or a \u2018conversion\u2019 column to auto update. They might well not check. Summary This is a deliberately basic course. We cover how to use spreadsheets explicitly . If you want everything to look clean and tidy, use a specialised package. Following the course \u00a4 Worked examples are not (yet) provided. However if you start at the beginning and work through, everything should (hopefully) become clear. In any case the idea is not to show you how-to-click-on-this-bit-of-the-window, but to get you to work out how, with your particular spreadsheet package , you would go about implementing the exercises. Feedback \u00a4 If you find a mistake or have a suggestion, open an issue or pull request in the git repo for this website. Or you can just click the pencil icon next to each section to edit the source directly and start your pull request like that.","title":"Overview"},{"location":"#following-the-course","text":"Worked examples are not (yet) provided. However if you start at the beginning and work through, everything should (hopefully) become clear. In any case the idea is not to show you how-to-click-on-this-bit-of-the-window, but to get you to work out how, with your particular spreadsheet package , you would go about implementing the exercises.","title":"Following the course"},{"location":"#feedback","text":"If you find a mistake or have a suggestion, open an issue or pull request in the git repo for this website. Or you can just click the pencil icon next to each section to edit the source directly and start your pull request like that.","title":"Feedback"},{"location":"advanced/","text":"Coming soon!","title":"Advanced"},{"location":"changelog/","text":"","title":"Changelog"},{"location":"going-forwards/","text":"Next steps \u00a4 Hopefully this will have got you going with spreadsheets. Remember they are a tool , not a whole prepackaged solution in and of themselves. Nevertheless they are a very powerful tool. You might want to look at: The function (formula) list of your particular package, to see what can be done. Charting options. Exporting/importing. Integrating with a database/financial package. Scanning existing paper documents and importing data (this is massively time-consuming to automate, unless a ready-rolled solution exits). Macros. You don\u2019t need them, though. Learn a decent programming language instead, like Python. Feedback? \u00a4 If any aspect of this course could be improved, open an issue or pull request in the git repo for this website. Or you can just click the pencil icon next to each section to edit the source directly and start your pull request like that. If you have found this course helpful, please do let me know .","title":"Going Forwards"},{"location":"going-forwards/#next-steps","text":"Hopefully this will have got you going with spreadsheets. Remember they are a tool , not a whole prepackaged solution in and of themselves. Nevertheless they are a very powerful tool. You might want to look at: The function (formula) list of your particular package, to see what can be done. Charting options. Exporting/importing. Integrating with a database/financial package. Scanning existing paper documents and importing data (this is massively time-consuming to automate, unless a ready-rolled solution exits). Macros. You don\u2019t need them, though. Learn a decent programming language instead, like Python.","title":"Next steps"},{"location":"going-forwards/#feedback","text":"If any aspect of this course could be improved, open an issue or pull request in the git repo for this website. Or you can just click the pencil icon next to each section to edit the source directly and start your pull request like that. If you have found this course helpful, please do let me know .","title":"Feedback?"},{"location":"license/","text":"MIT License Copyright (c) 2021 2e0byo Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"advanced/ex1/","text":"Functions \u00a4 How do we generate random data? Most spreadsheets have a function rand() which returns a random floating-point number between 0 and 1. Most also have a randbetween(bottom, top) function which returns a random integer between bottom and top (inclusive). Exercise Generate some random data between 0 and 1 in column A. Generate some random data between 10 and 50 in column B. Multiply them in column C. Apply formatting to Column B to make it currency. Does the data change? Enter something into a cell in column D. What happens to the random data? If nothing happened, enter =2*4 into the cell and then press enter. Press F9. What happens to your random data? (This may not work in all packages.) So, how do you \u2018freeze\u2019 your random data? One option is to turn off auto updating calculations, but that\u2019s a bad idea as it affects every calculation, not just the calls to rand() or randbetween() . Rather, when you have the data you want, select it and copy it to a new region using paste special to get the contents and not the formula. How this is done will depend on the package you are using. Generate Groceries! \u00a4 Alright, so I shouldn\u2019t have told you to use the same groceries each week. That\u2019s very unlikely, isn\u2019t it. Generate weekly grocery amounts for the last 3 years (you can consider them as being paid every 7 days) between \u00a350.00 and \u00a3250.00. Make sure the pence change as well! When you have your data, copy just the data to a new sheet or spreadsheet so you can use it later.","title":"Generating Data"},{"location":"advanced/ex1/#functions","text":"How do we generate random data? Most spreadsheets have a function rand() which returns a random floating-point number between 0 and 1. Most also have a randbetween(bottom, top) function which returns a random integer between bottom and top (inclusive). Exercise Generate some random data between 0 and 1 in column A. Generate some random data between 10 and 50 in column B. Multiply them in column C. Apply formatting to Column B to make it currency. Does the data change? Enter something into a cell in column D. What happens to the random data? If nothing happened, enter =2*4 into the cell and then press enter. Press F9. What happens to your random data? (This may not work in all packages.) So, how do you \u2018freeze\u2019 your random data? One option is to turn off auto updating calculations, but that\u2019s a bad idea as it affects every calculation, not just the calls to rand() or randbetween() . Rather, when you have the data you want, select it and copy it to a new region using paste special to get the contents and not the formula. How this is done will depend on the package you are using.","title":"Functions"},{"location":"advanced/ex1/#generate-groceries","text":"Alright, so I shouldn\u2019t have told you to use the same groceries each week. That\u2019s very unlikely, isn\u2019t it. Generate weekly grocery amounts for the last 3 years (you can consider them as being paid every 7 days) between \u00a350.00 and \u00a3250.00. Make sure the pence change as well! When you have your data, copy just the data to a new sheet or spreadsheet so you can use it later.","title":"Generate Groceries!"},{"location":"advanced/ex2/","text":"The first step is to get all your data into one spreadsheet. Import all Bob\u2019s Outgoings into one sheet and sort the data by the date. Use a column for \u2018description\u2019, a column for \u2018date\u2019, and a column for \u2018amount\u2019. Now import Bob\u2019s Incomings into separate sheets. Format the date column as a real date where I used the day of the year as a number. Combine all the Incomings into an \u2018Incomings\u2019 sheet by referencing values in the individual sheets into individual column (one for each sheet) and then total them in a \u2018total\u2019 column. Apply appropriate formats all round. Tip Sorting data is the spreadsheet package\u2019s job, not yours! Look up how to do it if you don\u2019t know.","title":"Importing Data"},{"location":"advanced/ex3/","text":"Now let\u2019s make the sheet easier to use. Create a summary sheet with total out, in and net per month and per year. Add conditional highlighting to your summary sheet so you can see whether money is going in or out.","title":"Layout"},{"location":"advanced/ex4/","text":"Pivot Tables \u00a4 A \u2018pivot\u2019 table is a kind of summary table where the spreadsheet package counts things up for you. The name is rather misleading, but there is a good wikipedia article with examples which says it clearer than I can here. Outgoings \u00a4 Create a new sheet, called Outgoing Pivot . Now we are going to create a pivot table in it. We want it to answer the question: How much did Bob spend on each category for a given week ? Thus the final, dynamic table, will look like this: Category week1 week 2 week3 Motoring total total total Groceries total total total Except with real data values. This is likely to take a while; you may need some googling (or some help from someone else).","title":"Pivot Table"},{"location":"advanced/ex4/#pivot-tables","text":"A \u2018pivot\u2019 table is a kind of summary table where the spreadsheet package counts things up for you. The name is rather misleading, but there is a good wikipedia article with examples which says it clearer than I can here.","title":"Pivot Tables"},{"location":"advanced/ex4/#outgoings","text":"Create a new sheet, called Outgoing Pivot . Now we are going to create a pivot table in it. We want it to answer the question: How much did Bob spend on each category for a given week ? Thus the final, dynamic table, will look like this: Category week1 week 2 week3 Motoring total total total Groceries total total total Except with real data values. This is likely to take a while; you may need some googling (or some help from someone else).","title":"Outgoings"},{"location":"advanced/intro/","text":"Background \u00a4 Bob trusts you a lot now. So much he\u2019s prepared to hire you properly. He wants you to sort out his accounts (so he\u2019s got some idea where he stands if HMRC come knocking). And they will come knocking, because Bob is being audited (he just doesn\u2019t know it yet). Bob has his account data all over the place. To be helpful I\u2019ve put it all into text documents (csvs) for you. In reality he would send you some files, some emails, some word documents, and some stuff you would have to type in manually. Bob is not very good with money. But fortunately he hires people who are (like you). For instance, his investment manager recently sent him this image of his holdings: Bitcoin was a waste of money. I could have told you that. But Bob should really put more money into investments. His ISA makes nothing (rather like mine). Since we want this course to finish at some point, I haven\u2019t given you his account details, only his cash flow. Note You might be interested in how I generated all this data. I used a spreadsheet ! Since this is a course I\u2019m doing in my spare time, I generated everything with randbetween(start_int, end_int) and tweaked the numbers to give the investments plausible trajectories. Then I just refreshed the columns until I got data I liked and copied them to the investments-static sheet. Data sources \u00a4 Here is all the data I\u2019m going to give you: File Meaning motoring.csv Bob\u2019s silly car mortgages.csv Bob\u2019s Mortgage Payments holidays.csv Bob\u2019s Holidays (he only travels at Christmas!) judo.csv The money Bob earned over the last two years at judo matches and training (Entered in 3 groups by day of the year, because I\u2019m lazy) rugby.csv The same, for rugby investments.csv Bob\u2019s investment worth (he doesn\u2019t cash out) overtimes.csv The overtime hours Bob worked (his saalary doesn\u2019t change) In addition, Bob has some \u2018standard\u2019 expenditures: his car (same mileage as before) does a mere 35 miles a week, on average. Bob lives in London, and has his car as a status symbol. It\u2019s a waste of money and is hurting the planet, but Bob is thinking of investing in green energy and buying a stuffed Panda toy, so his conscience is clean. his council tax (same as before) his groceries (same as before) Alright, so it\u2019s unlikely he would spend exactly the same amount every week, but I got bored of entering randbetween() . I tell you what, you can make up some random data! (See the first exercise.) He also has standard earnings: Except for 5 days off at Christmas and every weekend, Bob works his standard hours for a given day unless you have and entry for it in the csv above. On his birthday (17 February) Aunt Mabel sends him a \u00a35 book voucher. You don\u2019t need to account for that. Bob never spends it anyhow, as he never reads books. Instead he uses the vouchers as wallpaper. So far he has managed to wallpaper the guest bedroom, the under-stairs cupboard, and half the hallway. Visitors think it strange\u2014but thanks to Lockdown, Bob hasn\u2019t been getting many. Following these exercises \u00a4 Each exercise builds on the previous. I suggest you make a folder (or directory) for them, and name your first spreadsheet something like ex1.ods . Then when working on the second exercise, save-as ex2.ods (etc). Be careful not to overwrite your previous work: you will likely want it for reference.","title":"Introduction"},{"location":"advanced/intro/#background","text":"Bob trusts you a lot now. So much he\u2019s prepared to hire you properly. He wants you to sort out his accounts (so he\u2019s got some idea where he stands if HMRC come knocking). And they will come knocking, because Bob is being audited (he just doesn\u2019t know it yet). Bob has his account data all over the place. To be helpful I\u2019ve put it all into text documents (csvs) for you. In reality he would send you some files, some emails, some word documents, and some stuff you would have to type in manually. Bob is not very good with money. But fortunately he hires people who are (like you). For instance, his investment manager recently sent him this image of his holdings: Bitcoin was a waste of money. I could have told you that. But Bob should really put more money into investments. His ISA makes nothing (rather like mine). Since we want this course to finish at some point, I haven\u2019t given you his account details, only his cash flow. Note You might be interested in how I generated all this data. I used a spreadsheet ! Since this is a course I\u2019m doing in my spare time, I generated everything with randbetween(start_int, end_int) and tweaked the numbers to give the investments plausible trajectories. Then I just refreshed the columns until I got data I liked and copied them to the investments-static sheet.","title":"Background"},{"location":"advanced/intro/#data-sources","text":"Here is all the data I\u2019m going to give you: File Meaning motoring.csv Bob\u2019s silly car mortgages.csv Bob\u2019s Mortgage Payments holidays.csv Bob\u2019s Holidays (he only travels at Christmas!) judo.csv The money Bob earned over the last two years at judo matches and training (Entered in 3 groups by day of the year, because I\u2019m lazy) rugby.csv The same, for rugby investments.csv Bob\u2019s investment worth (he doesn\u2019t cash out) overtimes.csv The overtime hours Bob worked (his saalary doesn\u2019t change) In addition, Bob has some \u2018standard\u2019 expenditures: his car (same mileage as before) does a mere 35 miles a week, on average. Bob lives in London, and has his car as a status symbol. It\u2019s a waste of money and is hurting the planet, but Bob is thinking of investing in green energy and buying a stuffed Panda toy, so his conscience is clean. his council tax (same as before) his groceries (same as before) Alright, so it\u2019s unlikely he would spend exactly the same amount every week, but I got bored of entering randbetween() . I tell you what, you can make up some random data! (See the first exercise.) He also has standard earnings: Except for 5 days off at Christmas and every weekend, Bob works his standard hours for a given day unless you have and entry for it in the csv above. On his birthday (17 February) Aunt Mabel sends him a \u00a35 book voucher. You don\u2019t need to account for that. Bob never spends it anyhow, as he never reads books. Instead he uses the vouchers as wallpaper. So far he has managed to wallpaper the guest bedroom, the under-stairs cupboard, and half the hallway. Visitors think it strange\u2014but thanks to Lockdown, Bob hasn\u2019t been getting many.","title":"Data sources"},{"location":"advanced/intro/#following-these-exercises","text":"Each exercise builds on the previous. I suggest you make a folder (or directory) for them, and name your first spreadsheet something like ex1.ods . Then when working on the second exercise, save-as ex2.ods (etc). Be careful not to overwrite your previous work: you will likely want it for reference.","title":"Following these exercises"},{"location":"basic/formatting/","text":"Display vs. Content \u00a4 We said earlier that a spreadsheet was a bit like a computer program which showed you how it was working. By this we meant that the intermediate values are all on show. However, there is a problem with this idea. Consider this: A bottle of water costs \u00a30.611 when bought in units of 100 If you enter \u00a30.611 into A1 in most spreadsheet packages and press enter, you will see \u00a30.61 If you enter =100 * A1 into B1 you will see \u00a361.10 , not \u00a361.00 What has happened is that the spreadsheet package has simplified the display of the price of a bottle, without simplifying the value. But it hasn\u2019t stored \u2018\u00a30.611\u2019 as the value of A1 . Rather it has stored the number \u20180.611\u2019 and the information \u2018this cell is currency\u2019. Then, because the cell is currency, it has applied the currency format to the display of the number (but kept the real value intact). Whilst modern spreadsheet packages will guess formatting for you, they sometimes get it wrong (for instance interpreting 6/7 as a date). You can apply formatting manually by selecting a cell (or range of cells) and right-clicking or going to the format menu (depending on the package). Note Sometimes you want to change the actual value (for instance, you might be calculating a final amount, where you can\u2019t pay fractions of a penny). In that case you likely want the function Round or Ceiling . Formatting can do lots of things: Add a currency symbol Hide decimal places Display dates as words Apply a colour The precise functionality depends on the spreadsheet package. Conditional Formatting \u00a4 You can also apply formatting only if the value of a cell meets some condition. For instance, you can colour negative numbers red and positive numbers green. The precise means of doing this depends on the package. Conditional Formatting is an extremely valuable tool for allowing you to see at a glance what is happening. You should consider it every time you are tempted to colour data, or every time you write a formula with a condition in it (like Countif ). Example Imagine you meant to make a count of all cells over 55 in a given range, but you entered the condition as <55 by mistake. If you also apply a conditional format with the same condition, you will see at a glance what you have done. Note that this won\u2019t save you from typos! But it will make it more obvious that the number of red cells is not 6, but much more like 50. It follows that you need to think about testing what you write as you go along. Freezing Rows and Columns \u00a4 Most spreadsheet packages let you \u2018freeze\u2019 a number of rows or columns so that they stay in the same place as you scroll. This is a very good idea for header rows, so that as you scroll off the screen you don\u2019t forget what the columns are. Just because it fits on your screen doesn\u2019t mean it will on everyone\u2019s! Protecting Cells \u00a4 Most packages also let you \u2018lock\u2019 or \u2018protect\u2019 cells to forbid editing them. Think hard about doing this. It might seem a good idea to you to prevent e.g. random accidental edits of the VAT value. But if a colleague can\u2019t see how to edit a protected value, they will likely just circumvent it by editing the formula directly. This will leave the sheet in a much worse state, since now the VAT cell doesn\u2019t do anything (or, worse, two different VAT values are used.) Defining Print Ranges \u00a4 The process of producing paper reports to hand to clients is beyond the scope of this tutorial. But one thing worth knowing is that you can (try to) establish what goes on which page by defining print ranges . This lets you exclude things not worth printing, and (usually) define page breaks. Overformatting \u00a4 Remember that people have to read your sheet. Some people have colour blindness. Others have glary screens. Others have small devices. Others need to zoom right in. Keep your formatting clean and minimalist, and avoid colouring everything with full 80s glory 8-bit colouring. Avoid the use of custom or obscure fonts.","title":"Formatting"},{"location":"basic/formatting/#display-vs-content","text":"We said earlier that a spreadsheet was a bit like a computer program which showed you how it was working. By this we meant that the intermediate values are all on show. However, there is a problem with this idea. Consider this: A bottle of water costs \u00a30.611 when bought in units of 100 If you enter \u00a30.611 into A1 in most spreadsheet packages and press enter, you will see \u00a30.61 If you enter =100 * A1 into B1 you will see \u00a361.10 , not \u00a361.00 What has happened is that the spreadsheet package has simplified the display of the price of a bottle, without simplifying the value. But it hasn\u2019t stored \u2018\u00a30.611\u2019 as the value of A1 . Rather it has stored the number \u20180.611\u2019 and the information \u2018this cell is currency\u2019. Then, because the cell is currency, it has applied the currency format to the display of the number (but kept the real value intact). Whilst modern spreadsheet packages will guess formatting for you, they sometimes get it wrong (for instance interpreting 6/7 as a date). You can apply formatting manually by selecting a cell (or range of cells) and right-clicking or going to the format menu (depending on the package). Note Sometimes you want to change the actual value (for instance, you might be calculating a final amount, where you can\u2019t pay fractions of a penny). In that case you likely want the function Round or Ceiling . Formatting can do lots of things: Add a currency symbol Hide decimal places Display dates as words Apply a colour The precise functionality depends on the spreadsheet package.","title":"Display vs. Content"},{"location":"basic/formatting/#conditional-formatting","text":"You can also apply formatting only if the value of a cell meets some condition. For instance, you can colour negative numbers red and positive numbers green. The precise means of doing this depends on the package. Conditional Formatting is an extremely valuable tool for allowing you to see at a glance what is happening. You should consider it every time you are tempted to colour data, or every time you write a formula with a condition in it (like Countif ). Example Imagine you meant to make a count of all cells over 55 in a given range, but you entered the condition as <55 by mistake. If you also apply a conditional format with the same condition, you will see at a glance what you have done. Note that this won\u2019t save you from typos! But it will make it more obvious that the number of red cells is not 6, but much more like 50. It follows that you need to think about testing what you write as you go along.","title":"Conditional Formatting"},{"location":"basic/formatting/#freezing-rows-and-columns","text":"Most spreadsheet packages let you \u2018freeze\u2019 a number of rows or columns so that they stay in the same place as you scroll. This is a very good idea for header rows, so that as you scroll off the screen you don\u2019t forget what the columns are. Just because it fits on your screen doesn\u2019t mean it will on everyone\u2019s!","title":"Freezing Rows and Columns"},{"location":"basic/formatting/#protecting-cells","text":"Most packages also let you \u2018lock\u2019 or \u2018protect\u2019 cells to forbid editing them. Think hard about doing this. It might seem a good idea to you to prevent e.g. random accidental edits of the VAT value. But if a colleague can\u2019t see how to edit a protected value, they will likely just circumvent it by editing the formula directly. This will leave the sheet in a much worse state, since now the VAT cell doesn\u2019t do anything (or, worse, two different VAT values are used.)","title":"Protecting Cells"},{"location":"basic/formatting/#defining-print-ranges","text":"The process of producing paper reports to hand to clients is beyond the scope of this tutorial. But one thing worth knowing is that you can (try to) establish what goes on which page by defining print ranges . This lets you exclude things not worth printing, and (usually) define page breaks.","title":"Defining Print Ranges"},{"location":"basic/formatting/#overformatting","text":"Remember that people have to read your sheet. Some people have colour blindness. Others have glary screens. Others have small devices. Others need to zoom right in. Keep your formatting clean and minimalist, and avoid colouring everything with full 80s glory 8-bit colouring. Avoid the use of custom or obscure fonts.","title":"Overformatting"},{"location":"basic/formulas/","text":"Nomenklatura \u00a4 Formulas are, in fact, functions. The precise implementation varies with each spreadsheet package, but the basic idea is to write something like =Sum(A1:A7) in a cell. This sets the cell to the result of evaluating the function Sum with the values of the cells in the range A1 to A7 . In general these function are called formulas, which is in my opinion unduly confusing. In this course we will use the term \u2018formula\u2019 to refer to \u2018writing stuff in the formula bar\u2019, and \u2018function\u2019 to refer to individual statements like Sum() or If() . Conditionals and Booleans \u00a4 Consider the following instruction: count every cell bigger than 5 as a major outgoing, and every cell smaller as a minor outgoing. How might you implement it? The criteria \u2018bigger than 5\u2019 could be expressed >5 . The element >5 is true in some cases (when the cell is greater than 5) and false in others (when it isn\u2019t). It might be undefined or erroneous in other cases (when the cell contains \u201cI am a title!!!\u201d). We call things like >5 conditionals , and we think of them as \u2018evaluating\u2019 to a \u2018boolean value\u2019. In other words, when you \u2018work out\u2019 >5 you \u2018get\u2019 the values \u2018true\u2019 or \u2018false\u2019. These are called Booleans (because they are the components of Boolean Logic , named after a Mr. Bool who invented it for the fun of it, long before we actually applied his theorems to real physical computers.) Note Booleans like \u2018true\u2019 and \u2018false\u2019 are not the only things which can be true or false, however! Some other things are \u2018falsy\u2019, like 0 , and some other things are truthy, like This cell has text in it . Exactly what is truthy and falsy depends on the spreadsheet package. You rarely need to think about this, but it can be useful when you want to do things like \u2018count all cells which have something in them\u2019. You might find that if(A1, ... is true when A1 has anything in it except 0 or false , which might be what you want. International Functions \u00a4 Every spreadsheet package has a different set of functions. However there is a kind of defacto standard embracing at least the following: Function Description Sum add up all arguments passed Average compute the arithmetic mean of all arguments Count count the number of arguments. Round(number, places) round number to places places Ceiling round up If(cond, true, false) if condition is true, return the value of true, else return the value of false Countif(range, criteria) return the number of cells in range which satisfy condition Max return the max of all arguments passed Min return the min of all arguments passed If you find yourself writing a long and complicated bunch of nested formulas, like =If((Sum(A1:A6)/Count(A1:A6)) > $B$7, ((Sum(A1:A6)/Count(A1:A6))), $B$7) You might want a simpler builtin function, like: =Max(Average(A1:A6), $B$7) Keep the documentation open somewhere when trying. Chaining Functions \u00a4 As we have already shown, you can put functions within each other. The spreadsheet will evaluate the innermost function first and keep moving out until it has got one value. However you should avoid doing this if possible: It\u2019s confusing and hard to read. It\u2019s easy to end up with one bracket too few (or to many). It might still work, and do the wrong thing! You will likely get a cryptic error message if it fails and have a hard time working out what went wrong. Rather, store your intermediate values in properly labelled columns or rows. You can always hide them in them in your final output.","title":"Formulas"},{"location":"basic/formulas/#nomenklatura","text":"Formulas are, in fact, functions. The precise implementation varies with each spreadsheet package, but the basic idea is to write something like =Sum(A1:A7) in a cell. This sets the cell to the result of evaluating the function Sum with the values of the cells in the range A1 to A7 . In general these function are called formulas, which is in my opinion unduly confusing. In this course we will use the term \u2018formula\u2019 to refer to \u2018writing stuff in the formula bar\u2019, and \u2018function\u2019 to refer to individual statements like Sum() or If() .","title":"Nomenklatura"},{"location":"basic/formulas/#conditionals-and-booleans","text":"Consider the following instruction: count every cell bigger than 5 as a major outgoing, and every cell smaller as a minor outgoing. How might you implement it? The criteria \u2018bigger than 5\u2019 could be expressed >5 . The element >5 is true in some cases (when the cell is greater than 5) and false in others (when it isn\u2019t). It might be undefined or erroneous in other cases (when the cell contains \u201cI am a title!!!\u201d). We call things like >5 conditionals , and we think of them as \u2018evaluating\u2019 to a \u2018boolean value\u2019. In other words, when you \u2018work out\u2019 >5 you \u2018get\u2019 the values \u2018true\u2019 or \u2018false\u2019. These are called Booleans (because they are the components of Boolean Logic , named after a Mr. Bool who invented it for the fun of it, long before we actually applied his theorems to real physical computers.) Note Booleans like \u2018true\u2019 and \u2018false\u2019 are not the only things which can be true or false, however! Some other things are \u2018falsy\u2019, like 0 , and some other things are truthy, like This cell has text in it . Exactly what is truthy and falsy depends on the spreadsheet package. You rarely need to think about this, but it can be useful when you want to do things like \u2018count all cells which have something in them\u2019. You might find that if(A1, ... is true when A1 has anything in it except 0 or false , which might be what you want.","title":"Conditionals and Booleans"},{"location":"basic/formulas/#international-functions","text":"Every spreadsheet package has a different set of functions. However there is a kind of defacto standard embracing at least the following: Function Description Sum add up all arguments passed Average compute the arithmetic mean of all arguments Count count the number of arguments. Round(number, places) round number to places places Ceiling round up If(cond, true, false) if condition is true, return the value of true, else return the value of false Countif(range, criteria) return the number of cells in range which satisfy condition Max return the max of all arguments passed Min return the min of all arguments passed If you find yourself writing a long and complicated bunch of nested formulas, like =If((Sum(A1:A6)/Count(A1:A6)) > $B$7, ((Sum(A1:A6)/Count(A1:A6))), $B$7) You might want a simpler builtin function, like: =Max(Average(A1:A6), $B$7) Keep the documentation open somewhere when trying.","title":"International Functions"},{"location":"basic/formulas/#chaining-functions","text":"As we have already shown, you can put functions within each other. The spreadsheet will evaluate the innermost function first and keep moving out until it has got one value. However you should avoid doing this if possible: It\u2019s confusing and hard to read. It\u2019s easy to end up with one bracket too few (or to many). It might still work, and do the wrong thing! You will likely get a cryptic error message if it fails and have a hard time working out what went wrong. Rather, store your intermediate values in properly labelled columns or rows. You can always hide them in them in your final output.","title":"Chaining Functions"},{"location":"basic/maths/","text":"Operators \u00a4 The standard algebraic operators are available. operator written Addition + Subtraction - Multiplication * Division / Exponent ^ Tip To use any kind of operator in a cell, you need to start with = . References \u00a4 You reference the value of another cell by writing its cartesian address (e.g. A1 ). You reference a range of values with a : , e.g. A1:B2 . Autofilling \u00a4 Enter 1 in A1 . Enter 2 in A2 . Select A1 and A2 with the mouse. In the bottom right hand corner of the selection a small handle/plus sign appears. Drag it down and the spreadsheet will fill in the numbers between 1 and 10. Tip Autofilling works with formulas too, in which case references will be updated by row if you drag down or by column if you drag across. If you do not want a reference to be updated, prefix it with $ . Thus $A1 will not update if dragged across, but will update if dragged down, whilst A$1 will not update if dragged down, but will update if dragged across, and $A$1 will not change in either direction. Exercise If you find this confusing, the best way is to try. Enter =2*A1 into B1 opposite your list of numbers and autofill it down. Then select the whole column and autofill it to column C . Now delete column C and enter =2*$A1 into B1 and autofill in both directions again. Basic operations \u00a4 Exercise Make a list of numbers between 1 and 20 in column A . In column B , autofill a list going up in 2s. In successive columns calculate the multiplication division addition subtraction exponent of columns A and B . Exercise Add a column calculating the total of each row (use + ). Exercise Add a single cell adding up all the totals. Don\u2019t use a formula (yet). How might you do it without typing in all the cell values? Hint how could you use filling to help?","title":"Maths"},{"location":"basic/maths/#operators","text":"The standard algebraic operators are available. operator written Addition + Subtraction - Multiplication * Division / Exponent ^ Tip To use any kind of operator in a cell, you need to start with = .","title":"Operators"},{"location":"basic/maths/#references","text":"You reference the value of another cell by writing its cartesian address (e.g. A1 ). You reference a range of values with a : , e.g. A1:B2 .","title":"References"},{"location":"basic/maths/#autofilling","text":"Enter 1 in A1 . Enter 2 in A2 . Select A1 and A2 with the mouse. In the bottom right hand corner of the selection a small handle/plus sign appears. Drag it down and the spreadsheet will fill in the numbers between 1 and 10. Tip Autofilling works with formulas too, in which case references will be updated by row if you drag down or by column if you drag across. If you do not want a reference to be updated, prefix it with $ . Thus $A1 will not update if dragged across, but will update if dragged down, whilst A$1 will not update if dragged down, but will update if dragged across, and $A$1 will not change in either direction. Exercise If you find this confusing, the best way is to try. Enter =2*A1 into B1 opposite your list of numbers and autofill it down. Then select the whole column and autofill it to column C . Now delete column C and enter =2*$A1 into B1 and autofill in both directions again.","title":"Autofilling"},{"location":"basic/maths/#basic-operations","text":"Exercise Make a list of numbers between 1 and 20 in column A . In column B , autofill a list going up in 2s. In successive columns calculate the multiplication division addition subtraction exponent of columns A and B . Exercise Add a column calculating the total of each row (use + ). Exercise Add a single cell adding up all the totals. Don\u2019t use a formula (yet). How might you do it without typing in all the cell values? Hint how could you use filling to help?","title":"Basic operations"},{"location":"exercises/basic-accounts/","text":"Bob earns money. He also spends it. Bob is not very good at money. He spends a lot, and he earns a lot. In fact, he spends so much he has lots of different jobs; and he earns so much he has lots of expenditure. Up till now he\u2019s never known which was greater at any moment: the money he spends, or the money he earns. He hires you to find out. Bob is also very canny. To prove you can do it, he first hires you to sort out this week\u2019s expenditures. This week Bob spent \u00a3150.78 on groceries. (Bob likes wine. He also likes Waitrose. Waitrose likes Bob. Bob does not like his credit card bill when he goes to Waitrose too often.) Also, he spent \u00a315.93 in Starbucks, \u00a317.99 at Joe\u2019s Hipster Coffee Emporium, \u00a322 to have the shirt he spilt coffee over at Joe\u2019s dry cleaned and \u00a317.96 on bus fares. He drove 47 miles, and pays \u00a31.51 per litre of petrol, but makes only 30 miles to the (British) gallon (Bob has a performance car). He pays \u00a3170 a month in council tax and \u00a375 a month in insurance, and he wants this included in the weekly total. (Bob spent these over the week, but doesn\u2019t care too much about which day, so he wants you to consider outgoings on a weekly basis.) Tip You probably decided to note those values down. Note them down in a spreadsheet . (If you thought of that, congratulations.) Bob also works a lot. He works as a Judo instructor in the weekday evenings, for 3 hours a week at \u00a315 an hour. He works as a management consultant in the day, between 9 and 5 with an hour off for lunch, and is paid \u00a335 an hour (after tax) to give confusing advice and tell companies they need to fire people. He never tells them to fire him . Naturally. Also, he works sometimes as a rugby referee. This Saturday he was paid a \u00a350 flat fee for a game. Bob only pays tax on his day job, but he has had a twinge of conscience. He means to ask you for help calculating what he should pay. For now he wants you to prove your worth, by making a weekly accounts spreadsheet which shows him at a glance what he has earned, what he has paid, and what portion of his larger outgoings should be counted against this period. Make such a spreadsheet. Tip Organise your data with a column for incomings and a column for outgoings. That way you can avoid sign errors (typing negative numbers quickly gets dull). Or you might want specific columns. Use rows for dates. Don\u2019t split your spreadsheet in two halfway down as though it were a paper sheet: it\u2019s easy to scroll and miss the division. Help Start with what you know. Bob has given you some things at a daily rate, and others weekly. This is annoying, but very typical. It\u2019s probably better to work daily and enter transactions against the last day (or first day) of the week. A \u2018Sundries\u2019 column will save you making a specific entry for everything if you decide to have specific columns. Use a formula to calculate the share of monthly expenses which should be counted this week. Make the calculation explicit . (Do you now need another column for the monthly rate? How are you going to store it? Where is it clearest?)","title":"Basic Accounts"},{"location":"exercises/convenience/","text":"Bob is lazy. Also, his psychiatrist told him typing risks disturbing his Oedipus complex. Bob is not quite convinced that his computer really is his mother and occasionally wonders if the psychiatrist is worth the money he pays, but he decides to get you to modify the spreadsheet. For his day job only, if he enters nothing Monday to Friday, he should earn his daily salary. If he enters anything else, he should earn that number of hours\u2019 pay (taking into account overtime as before). But for Saturday and Sunday he should enter nothing and earn nothing (Bob doesn\u2019t work saturday and Sunday at his day job). Also it should still highlight as before. Help You need a conditional formula for this. You also need to autocomplete two formulas (or to build a conditional lookup for the day into the formula). You need to test that what you have built really works: how will you do this?","title":"Convenience"},{"location":"exercises/fancier/","text":"Bob is impressed. But your spreadsheet is boring, and a bit hard to read. Bob wants it to be colourful: if he earns a particularly large sum he wants it to be in green, and if he spends a particularly large amount he wants it to be in BOLD RED . (His psychiatrist, whom he saw for \u00a3678 last month, tells him colours will make his life come alive. His psychiatrist also needs an accountant, but it is not the only help the poor man needs.) Note Bob hasn\u2019t told you to enter the psychiatrist\u2019s amount. But as a good accountant you should make a mental note that this is another outgoing. Think now: how would you adapt your sheet to add another monthly bill? Change your spreadsheet so incomings greater than \u00a3320 (in one day) are highlighted in green, and outgoings greater than \u00a360 are in bold red. Bob will test that you have really done it by changing some numbers: the red and green should come and go as the numbers change. Help This is conditional formatting. Review the section on formatting if you are stuck.","title":"Fancier Accounts"},{"location":"exercises/final/","text":"Enlarging \u00a4 Bob is starting to think you might be worth it. Make this spreadsheet work for a whole month, with a column for weekly totals. Tip You should be able largely just to autofill. But think about how you will check that everything has worked. Formatting \u00a4 Bob wants the colours to follow a threshold he sets in the corner of the spreadsheet. He can then use the thresholds to colour different kinds of expenditure and use that to see where he\u2019s going. Make two cells, one for big outgoings (to colour red) and the other for big incomings (to colour green). Set up the formatting to use the values of these cells. Hint You might need an intermediate column. Now make sure the spreadsheet can be scrolled without the column header changing. Format the column headers appropriately. Also think about the best place to put the constants: would it make more sense to put them on another sheet? How will you reference another sheet? How would someone else discover how to make sense of your spreadsheet? Tip Always design for someone else who encounters your work for the first time. That way when you come back in a year or so you will be able to work out how your spreadsheets work. If necessary, add explanatory notes.","title":"User Friendly"},{"location":"exercises/final/#enlarging","text":"Bob is starting to think you might be worth it. Make this spreadsheet work for a whole month, with a column for weekly totals. Tip You should be able largely just to autofill. But think about how you will check that everything has worked.","title":"Enlarging"},{"location":"exercises/final/#formatting","text":"Bob wants the colours to follow a threshold he sets in the corner of the spreadsheet. He can then use the thresholds to colour different kinds of expenditure and use that to see where he\u2019s going. Make two cells, one for big outgoings (to colour red) and the other for big incomings (to colour green). Set up the formatting to use the values of these cells. Hint You might need an intermediate column. Now make sure the spreadsheet can be scrolled without the column header changing. Format the column headers appropriately. Also think about the best place to put the constants: would it make more sense to put them on another sheet? How will you reference another sheet? How would someone else discover how to make sense of your spreadsheet? Tip Always design for someone else who encounters your work for the first time. That way when you come back in a year or so you will be able to work out how your spreadsheets work. If necessary, add explanatory notes.","title":"Formatting"},{"location":"exercises/intro/","text":"Hello to Bob \u00a4 It is time to introduce you to Bob. Bob will have a lot to say (generally in the imperative) for the rest of this course. But it\u2019s a good idea to get an idea of him in advance. Here is a picture of Bob, camping: Bob dresses like this every time he goes camping. He never dresses like this at any other point. This tells you a lot about Bob. Here is another photo of Bob: This photo is on file with the Her Majesty\u2019s Revenue and Customs. Bob doesn\u2019t know that it exists, but if he did he would be even more keen to hire you. Following these exercises \u00a4 Each exercise builds on the previous. I suggest you make a folder (or directory) for them, and name your first spreadsheet something like ex1.ods . Then when working on the second exercise, save-as ex2.ods (etc). Be careful not to overwrite your previous work: you will likely want it for reference.","title":"Introduction"},{"location":"exercises/intro/#hello-to-bob","text":"It is time to introduce you to Bob. Bob will have a lot to say (generally in the imperative) for the rest of this course. But it\u2019s a good idea to get an idea of him in advance. Here is a picture of Bob, camping: Bob dresses like this every time he goes camping. He never dresses like this at any other point. This tells you a lot about Bob. Here is another photo of Bob: This photo is on file with the Her Majesty\u2019s Revenue and Customs. Bob doesn\u2019t know that it exists, but if he did he would be even more keen to hire you.","title":"Hello to Bob"},{"location":"exercises/intro/#following-these-exercises","text":"Each exercise builds on the previous. I suggest you make a folder (or directory) for them, and name your first spreadsheet something like ex1.ods . Then when working on the second exercise, save-as ex2.ods (etc). Be careful not to overwrite your previous work: you will likely want it for reference.","title":"Following these exercises"},{"location":"exercises/overtime-accounts/","text":"Note At this point we are putting everything together. Have a look at your previous spreadsheets as you go along. Bob is impressed with your calculator, but doesn\u2019t like it being separate. He wants to have a bunch of rows in his weekly spreadsheet, one for each day of the week, and a column for each source of income, and he wants to be able to enter the number of hours in each for the given rate, and be told how much he earned that day. He wants the column for his job to take overtime into account. Make such a spreadsheet. Help Previously your columns were manually entered. Now they will be calculated. Be careful to use invariant referencing with $ for the hourly rates, otherwise when you autofill the calculation will fail.","title":"Overtime Accounts"},{"location":"exercises/overtime/","text":"Bob is even more impressed. He plans to ask about tax soon. That shows he\u2019s really impressed, because he doesn\u2019t trust anyone, so he never talks about tax. (Bob is rather paranoid about tax, and thinks HMRC are actually vampires. He carries a garlic-soaked cocktail stick he nicked from a bowl of olives in his jacket pocket, just in case.) Bob sometimes works overtime, to get even more money. However, because he\u2019s bad at accounts, he doesn\u2019t record the amount of overtime he\u2019s done. He just records the total amount, and wants you to make a calculator. Bob\u2019s hours are 9-5 with an hour off for lunch. Anything more is overtime. Overtime is paid at 177% his hourly rate (which is still \u00a335/hour after tax). Make a calculator spreadsheet where Bob can enter the amount of hours he worked in a given day and be told how much he will earn. (You may assume, for now, that Bob does not hit any tax thresholds when he goes into overtime.) Tip Parametrise your calculation. (i.e. put the overtime rate in a cell where it can be modified.) Use invariant referencing with $ so you can drag-complete multiple lines. Help If stuck, think about what you want the output to look like. Make a mockup. Then think about where the numbers come from, and replace them with calculations. If you need to, review the sections on spreadsheet maths and formulas.","title":"Overtime"},{"location":"introduction/practice/","text":"Which package? \u00a4 Largely this is a question of where you find yourself. The kind of spreadsheet editing we are going to do will work equally well in some overpriced behemoth like Excel or something feather light like Gnumeric . With a bit of adaption it will work in Emacs Org-Mode . Use whichever program you will continue to use. If you do not have a spreadsheet package installed and have a good internet connection, use Google Sheets. Otherwise install Libre Office and use Calc . Basic layout \u00a4 Thus, since he wants science, I shall enumerate my responses. And to be even more scientific, I shall enumerate them with letters . \u2013 P\u00e9guy Load up your spreadsheet package. Most of your screen should be little rectangles: these are called cells . Cells come in rows and columns . By convention columns are lettered and rows are numbered. Thus the first cell is A1 , the one to the right of it B1 , the one below it A2 , and so on. If you click in a cell you can normally type directly into it. But somewhere along the top of the screen\u2014normally directly above the cells (the sheet ) is a long text input field, called the formula bar . Here you can type and what you type will appear in the cell (often: once you press enter or click on the \u2018tick\u2019 to the right hand side of the bar). Along the top of the screen there might be menus, but Micro$oft has started replacing them with a \u2018ribbon\u2019 which functions like a kind of menu expanded in lots of directions and entirely lacking in hierarchy (you may have gathered I don\u2019t like ribbon layouts). Along the bottom of the screen are some tabs. The first of these should be selected. These allow you to switch (and create) sheets . Exercise Type something into cell A1. Now click on the little tab to the right of the tab for this sheet at the bottom. (You may instead have to click and make a new sheet.) Notice how the sheet is cleared. Type something else into cell A1. Switch back to the first sheet and notice how it changes.","title":"Practice"},{"location":"introduction/practice/#which-package","text":"Largely this is a question of where you find yourself. The kind of spreadsheet editing we are going to do will work equally well in some overpriced behemoth like Excel or something feather light like Gnumeric . With a bit of adaption it will work in Emacs Org-Mode . Use whichever program you will continue to use. If you do not have a spreadsheet package installed and have a good internet connection, use Google Sheets. Otherwise install Libre Office and use Calc .","title":"Which package?"},{"location":"introduction/practice/#basic-layout","text":"Thus, since he wants science, I shall enumerate my responses. And to be even more scientific, I shall enumerate them with letters . \u2013 P\u00e9guy Load up your spreadsheet package. Most of your screen should be little rectangles: these are called cells . Cells come in rows and columns . By convention columns are lettered and rows are numbered. Thus the first cell is A1 , the one to the right of it B1 , the one below it A2 , and so on. If you click in a cell you can normally type directly into it. But somewhere along the top of the screen\u2014normally directly above the cells (the sheet ) is a long text input field, called the formula bar . Here you can type and what you type will appear in the cell (often: once you press enter or click on the \u2018tick\u2019 to the right hand side of the bar). Along the top of the screen there might be menus, but Micro$oft has started replacing them with a \u2018ribbon\u2019 which functions like a kind of menu expanded in lots of directions and entirely lacking in hierarchy (you may have gathered I don\u2019t like ribbon layouts). Along the bottom of the screen are some tabs. The first of these should be selected. These allow you to switch (and create) sheets . Exercise Type something into cell A1. Now click on the little tab to the right of the tab for this sheet at the bottom. (You may instead have to click and make a new sheet.) Notice how the sheet is cleared. Type something else into cell A1. Switch back to the first sheet and notice how it changes.","title":"Basic layout"},{"location":"introduction/theory/","text":"Two ways of working \u00a4 Let\u2019s start with two pictures. Firstly, we have an accountant in Dickens\u2019 time. He sits stooped over a desk, on the low-ceilinged second floor of a building which is one floor shop, one floor offices, two floors lodgings and the attic for the servants. He has at his right ink-pot and pen, before him, a ledger book, to his left, older ledger books, rescripts (for so once we spelt receipt), bills, notes, et cetera. He writes down figures now above, now below the line and adds them up in his head with the aid of notes on a scrap of paper. In this case, the medium is merely a record : the work is done in his head. Secondly, we have a modern accountant using some financial package. He sits before a computer in some comfortable (but hideous) \u2018working space\u2019 (for so now do we spell \u2018office\u2019). He imports \u2018data\u2019 from emails, using an import wizard, and the totals appear automagically on the view he selects from the software. In this case, the medium is merely a record : but the work is done by the computer. Whilst it is possible to use spreadsheets in this way, there are good reasons not to. In the first case: A computer offers little advantage over pen and paper when used like this. Nobody expects you to do this (though a surprising number do) so you will catch people out. In the second case: Spreadsheet code (macros, over the top formulae, hidden regions with intermediate values) is rarely actively maintained and almost never rigorously tested. It\u2019s bad code. Dedicated packages are much less likely to have bugs in them. Spreadsheets are ugly layout engines. Spreadsheets, when hacked to look good displaying lots of data, are impossible to edit. The ideal medium is somewhere in the middle. When you write code, the intermediate values exist somewhere in ram, and you don\u2019t know what they are. (Unless you print them, but you usually only do that in debugging.) If you want to make sure your code works, you write unit and functional tests which supply known inputs and look for the right output\u2014in other words, they treat your code like a black box. Testing like this is impossible in most spreadsheet packages (and makes little sense anyway). Rather, in a spreadsheet, you have a kind of magical ledger book which calculates for you. Note that it does not think for you. You have to do all the thinking. If you want a column which represents the column before squared, it will make one without blinking. If you enter the wrong formula, it will double the column. You have to notice that your square numbers are improperly distributed: the package will not help you. From this we get our first principle of spreadsheet design: Principle No sheet should be too big or too complicated for an ordinary person, at their most tired, to get their head around. That means: All important columns should fit on the screen No active rows should be hidden under rows of data No calculation should go too quickly. If you need to do lots of things to data, use intermediate columns (you can always hide them). Header rows should be fixed if possible. Sheets should be intelligently named There is a corollary of this principle, which is not going to come up in this tutorial, but which is worth thinking about: Principle When you need to handle more data than you can whilst following the first principle, you need something other than a spreadsheet. You might need: A database A financial package Custom software A script Any of these can handle data which started out in a spreadsheet very easily.","title":"Theory"},{"location":"introduction/theory/#two-ways-of-working","text":"Let\u2019s start with two pictures. Firstly, we have an accountant in Dickens\u2019 time. He sits stooped over a desk, on the low-ceilinged second floor of a building which is one floor shop, one floor offices, two floors lodgings and the attic for the servants. He has at his right ink-pot and pen, before him, a ledger book, to his left, older ledger books, rescripts (for so once we spelt receipt), bills, notes, et cetera. He writes down figures now above, now below the line and adds them up in his head with the aid of notes on a scrap of paper. In this case, the medium is merely a record : the work is done in his head. Secondly, we have a modern accountant using some financial package. He sits before a computer in some comfortable (but hideous) \u2018working space\u2019 (for so now do we spell \u2018office\u2019). He imports \u2018data\u2019 from emails, using an import wizard, and the totals appear automagically on the view he selects from the software. In this case, the medium is merely a record : but the work is done by the computer. Whilst it is possible to use spreadsheets in this way, there are good reasons not to. In the first case: A computer offers little advantage over pen and paper when used like this. Nobody expects you to do this (though a surprising number do) so you will catch people out. In the second case: Spreadsheet code (macros, over the top formulae, hidden regions with intermediate values) is rarely actively maintained and almost never rigorously tested. It\u2019s bad code. Dedicated packages are much less likely to have bugs in them. Spreadsheets are ugly layout engines. Spreadsheets, when hacked to look good displaying lots of data, are impossible to edit. The ideal medium is somewhere in the middle. When you write code, the intermediate values exist somewhere in ram, and you don\u2019t know what they are. (Unless you print them, but you usually only do that in debugging.) If you want to make sure your code works, you write unit and functional tests which supply known inputs and look for the right output\u2014in other words, they treat your code like a black box. Testing like this is impossible in most spreadsheet packages (and makes little sense anyway). Rather, in a spreadsheet, you have a kind of magical ledger book which calculates for you. Note that it does not think for you. You have to do all the thinking. If you want a column which represents the column before squared, it will make one without blinking. If you enter the wrong formula, it will double the column. You have to notice that your square numbers are improperly distributed: the package will not help you. From this we get our first principle of spreadsheet design: Principle No sheet should be too big or too complicated for an ordinary person, at their most tired, to get their head around. That means: All important columns should fit on the screen No active rows should be hidden under rows of data No calculation should go too quickly. If you need to do lots of things to data, use intermediate columns (you can always hide them). Header rows should be fixed if possible. Sheets should be intelligently named There is a corollary of this principle, which is not going to come up in this tutorial, but which is worth thinking about: Principle When you need to handle more data than you can whilst following the first principle, you need something other than a spreadsheet. You might need: A database A financial package Custom software A script Any of these can handle data which started out in a spreadsheet very easily.","title":"Two ways of working"}]}